[
  {
    "index": 0,
    "type": "code",
    "has_plot": true,
    "has_func": false,
    "has_calc": false,
    "preview": "# !pip install geopandas rasterio shapely scipy scikit-learn scikit-image seaborn matplotlib_scalebar"
  },
  {
    "index": 1,
    "type": "code",
    "has_plot": true,
    "has_func": false,
    "has_calc": false,
    "preview": "import sys\nimport os\nimport matplotlib.pyplot as plt\nimport rasterio\nfrom rasterio.plot import show\nprint(\"Python executable:\", sys.executable)\nprint("
  },
  {
    "index": 2,
    "type": "markdown",
    "content": "### Setup"
  },
  {
    "index": 3,
    "type": "code",
    "has_plot": true,
    "has_func": false,
    "has_calc": true,
    "preview": "from unittest.mock import sentinel\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport warnings\nwarnings.filterwarnings('ignore')\ni"
  },
  {
    "index": 4,
    "type": "markdown",
    "content": "### Load Data"
  },
  {
    "index": 5,
    "type": "code",
    "has_plot": false,
    "has_func": true,
    "has_calc": false,
    "preview": "df = pd.read_csv(saocom_path)\ndf.columns = ['ID', 'SVET', 'LVET', 'LAT', 'LAT2', 'LON', 'LON2', 'HEIGHT', 'HEIGHT_WRT_DEM', 'SIGMA_HEIGHT', 'COHER']\n\n"
  },
  {
    "index": 6,
    "type": "markdown",
    "content": "### HORIZONTAL DATUM VERIFICATION"
  },
  {
    "index": 7,
    "type": "code",
    "has_plot": false,
    "has_func": true,
    "has_calc": false,
    "preview": "from sklearn.neighbors import NearestNeighbors\n\ndef remove_isolated_knn(gdf, k=100, distance_threshold=1000):\n    coords = np.column_stack((gdf.geomet"
  },
  {
    "index": 8,
    "type": "markdown",
    "content": "### RESAMPLE TO 10M"
  },
  {
    "index": 9,
    "type": "code",
    "has_plot": false,
    "has_func": true,
    "has_calc": true,
    "preview": "# --- Resample helpers (10 m)\nprofile = {\n    'driver':'GTiff','dtype':'float32','width':grid_width,'height':grid_height,\n    'count':1,'crs':TARGET_C"
  },
  {
    "index": 10,
    "type": "markdown",
    "content": "### CREATE RASTERIZED MASK FROM SAOCOM CONVEX HULL"
  },
  {
    "index": 11,
    "type": "code",
    "has_plot": false,
    "has_func": true,
    "has_calc": false,
    "preview": "# --- Rasterized hull mask (10 m grid)\nhull_mask = features.rasterize(\n    [data_hull], out_shape=(grid_height, grid_width),\n    transform=target_tran"
  },
  {
    "index": 12,
    "type": "markdown",
    "content": "### SAMPLE REFERENCE DEMS AT SAOCOM LOCATIONS"
  },
  {
    "index": 13,
    "type": "code",
    "has_plot": false,
    "has_func": true,
    "has_calc": true,
    "preview": "# --- Sample reference DEMs at SAOCOM locations (vectorized)\nxs, ys = saocom_gdf.geometry.x.values, saocom_gdf.geometry.y.values\nrows, cols = rowcol(t"
  },
  {
    "index": 14,
    "type": "markdown",
    "content": "### CREATE SAOCOM COVERAGE GRID"
  },
  {
    "index": 15,
    "type": "code",
    "has_plot": false,
    "has_func": false,
    "has_calc": false,
    "preview": "# --- SAOCOM coverage grid (10 m)\nsaocom_rows, saocom_cols = rowcol(\n    target_transform,\n    saocom_gdf.geometry.x.values,\n    saocom_gdf.geometry.y"
  },
  {
    "index": 16,
    "type": "markdown",
    "content": "### LOAD REFERENCE DEM DATA (Already in memory from Cell 4)"
  },
  {
    "index": 17,
    "type": "code",
    "has_plot": false,
    "has_func": true,
    "has_calc": true,
    "preview": "# --- Load reference DEM data (already in memory)\ntinitaly_data   = tinitaly_10m.copy()\ncopernicus_data = copernicus_10m.copy()\n\n# --- Elevation diffe"
  },
  {
    "index": 18,
    "type": "markdown",
    "content": "### LOAD DBF LOOKUP TABLE"
  },
  {
    "index": 19,
    "type": "code",
    "has_plot": false,
    "has_func": false,
    "has_calc": true,
    "preview": "# --- 3) Load DBF lookup\ndbf_table  = DBF(corine_dbf_path, load=True)\nlookup_df  = pd.DataFrame(iter(dbf_table))\nvalue_to_code = dict(zip(lookup_df['V"
  },
  {
    "index": 20,
    "type": "markdown",
    "content": "### SIMPLE SPATIAL OVERLAP VISUALIZATION"
  },
  {
    "index": 21,
    "type": "code",
    "has_plot": true,
    "has_func": false,
    "has_calc": false,
    "preview": "# --- Simple spatial overlap visualization\nfrom matplotlib.patches import Rectangle\n\nfig, ax = plt.subplots(figsize=(12, 10), facecolor='white')\nax.se"
  },
  {
    "index": 22,
    "type": "markdown",
    "content": "### COMPREHENSIVE REFERENCE DEM COMPARISON VISUALIZATION"
  },
  {
    "index": 23,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": false,
    "preview": "# --- Comprehensive reference DEM comparison visualization (condensed)\n\nfig, axes = plt.subplots(4, 2, figsize=(20, 28), facecolor='white')\nextent = ["
  },
  {
    "index": 24,
    "type": "markdown",
    "content": "### SAOCOM HEIGHT RESIDUAL OUTLIER DETECTION AND VISUALIZATION"
  },
  {
    "index": 25,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": false,
    "preview": "import numpy as np, pandas as pd, geopandas as gpd, matplotlib.pyplot as plt\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing i"
  },
  {
    "index": 26,
    "type": "markdown",
    "content": "### 1. SPATIAL SAMPLE CORINE LAND COVER AT SAOCOM POINTS"
  },
  {
    "index": 27,
    "type": "code",
    "has_plot": false,
    "has_func": true,
    "has_calc": false,
    "preview": "\n# --- Pre-req: residuals (SAOCOM calibrated to TINITALY)\nsaocom_gdf['diff_tinitaly'] = saocom_gdf['HEIGHT_ABSOLUTE_TIN'] - saocom_gdf['tinitaly_heigh"
  },
  {
    "index": 28,
    "type": "markdown",
    "content": "###  1. PREPARE DATA FOR PLOTTING"
  },
  {
    "index": 29,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": true,
    "preview": "\n\n# =============================================================================\n# 1. PREPARE DATA FOR PLOTTING\n# ==================================="
  },
  {
    "index": 30,
    "type": "markdown",
    "content": "### SENTINEL-2 RGB PREPARATION"
  },
  {
    "index": 31,
    "type": "code",
    "has_plot": false,
    "has_func": false,
    "has_calc": true,
    "preview": "# =============================================================================\n# SENTINEL-2 RGB PREPARATION\n# ======================================="
  },
  {
    "index": 32,
    "type": "markdown",
    "content": "### 2. GENERATE VIOLIN PLOT (Level 3 - Detailed Performance)"
  },
  {
    "index": 33,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": true,
    "preview": "# =============================================================================\n# 1. GENERATE STATS WITHIN THE PLOT SCRIPT\n# ========================="
  },
  {
    "index": 34,
    "type": "markdown",
    "content": "### Class Overlays Basic\n"
  },
  {
    "index": 35,
    "type": "markdown",
    "content": "### INDIVIDUAL CLASS OVERLAY MAPS (COLORBLIND-FRIENDLY)"
  },
  {
    "index": 36,
    "type": "code",
    "has_plot": true,
    "has_func": false,
    "has_calc": false,
    "preview": "# =============================================================================\n# INDIVIDUAL CLASS OVERLAY MAPS (COLORBLIND-FRIENDLY)\n# =============="
  },
  {
    "index": 37,
    "type": "markdown",
    "content": "### SAOCOM VS TINITALY COMPARISON"
  },
  {
    "index": 38,
    "type": "code",
    "has_plot": false,
    "has_func": false,
    "has_calc": false,
    "preview": "# =============================================================================\n# SAOCOM VS TINITALY COMPARISON\n# ===================================="
  },
  {
    "index": 39,
    "type": "markdown",
    "content": "    ### 3d model\n"
  },
  {
    "index": 40,
    "type": "code",
    "has_plot": true,
    "has_func": false,
    "has_calc": true,
    "preview": "import plotly.graph_objects as go\nfrom scipy.interpolate import griddata\n\n# Use the cleaned dataset and outliers from Isolation Forest\nnormal_sample_3"
  },
  {
    "index": 41,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": false,
    "preview": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import griddata\n\n# Note: This script assumes the followi"
  },
  {
    "index": 42,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": false,
    "preview": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Note: This script assumes the following variables are pre-defined from previ"
  },
  {
    "index": 43,
    "type": "markdown",
    "content": "### Edited Histograms\n\n"
  },
  {
    "index": 44,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": false,
    "preview": "def plot_distribution(ax, diff_series, title, metrics):\n    \"\"\"Helper function to plot a single residual distribution histogram.\"\"\"\n    ax.set_facecol"
  },
  {
    "index": 45,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": false,
    "preview": "import matplotlib.pyplot as plt\nimport numpy as np\n\ndef plot_scatter_comparison(ax, x_data, y_data, x_label, y_label, title, stats):\n    \"\"\"\n    Creat"
  },
  {
    "index": 46,
    "type": "markdown",
    "content": "### Density Plots Color\n"
  },
  {
    "index": 47,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": false,
    "preview": "import matplotlib.pyplot as plt\nimport matplotlib.colors as colors\n\n# --- Visualization ---\nfig, axes = plt.subplots(1, 3, figsize=(21, 7), facecolor="
  },
  {
    "index": 48,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": false,
    "preview": "import matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport numpy as np\n\n# --- Visualization ---\nfig, axes = plt.subplots(1, 3, figsize="
  },
  {
    "index": 49,
    "type": "markdown",
    "content": "### SAOCOM VS REFERENCE DEMs - GRIDDED COMPARISON ANALYSIS"
  },
  {
    "index": 50,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": true,
    "preview": "# import numpy as np\n# import pandas as pd\n# import matplotlib.pyplot as plt\n# from scipy.interpolate import griddata\n# from scipy import stats\n#\n# # "
  },
  {
    "index": 51,
    "type": "markdown",
    "content": "### VOID ZONES vs LAND COVER ANALYSIS"
  },
  {
    "index": 52,
    "type": "code",
    "has_plot": true,
    "has_func": false,
    "has_calc": false,
    "preview": "# =============================================================================\n# VOID ZONES vs LAND COVER ANALYSIS\n# ================================"
  },
  {
    "index": 53,
    "type": "markdown",
    "content": "### VOID ZONES vs LAND COVER - \"SWISS CHEESE\" VISUALIZATION"
  },
  {
    "index": 54,
    "type": "code",
    "has_plot": true,
    "has_func": false,
    "has_calc": false,
    "preview": "# # =============================================================================\n# # VOID ZONES vs LAND COVER - \"SWISS CHEESE\" VISUALIZATION\n# # ===="
  },
  {
    "index": 55,
    "type": "markdown",
    "content": "### INDIVIDUAL LAND COVER MAPS WITH VOID VISUALIZATION"
  },
  {
    "index": 56,
    "type": "code",
    "has_plot": true,
    "has_func": false,
    "has_calc": true,
    "preview": "# # =============================================================================\n# # 1. PRE-CALCULATE ALL STATISTICS (DERIVED FROM \"SWISS CHEESE\" DAT"
  },
  {
    "index": 57,
    "type": "markdown",
    "content": "### Land cover histograms"
  },
  {
    "index": 58,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": true,
    "preview": "import numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport rasterio\nfrom rasterio.transform import rowcol\nfrom pathlib import Path\nimport m"
  },
  {
    "index": 59,
    "type": "code",
    "has_plot": true,
    "has_func": false,
    "has_calc": false,
    "preview": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom rasterio.features import shapes\nfrom shapely.geometry import shape\n\n# Note"
  },
  {
    "index": 60,
    "type": "markdown",
    "content": "### Topo Maps"
  },
  {
    "index": 61,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": true,
    "preview": "# =============================================================================\n# TOPOGRAPHIC FACTORS ANALYSIS: SLOPE, ASPECT & ELEVATION (TINITALY vs"
  },
  {
    "index": 62,
    "type": "code",
    "has_plot": true,
    "has_func": true,
    "has_calc": true,
    "preview": "# =============================================================================\n# TOPOGRAPHIC INTERPRETATION & SPATIAL SUITABILITY MAPPING  (ONE-CELL,"
  }
]