{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# SAOCOM DEM Validation - Complete Analysis",
        "",
        "This notebook performs comprehensive validation of SAOCOM InSAR heights against reference DEMs with full land cover analysis, terrain analysis, void zone detection, and all visualizations from the original analysis."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Setup and Configuration"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Standard libraries",
        "import sys",
        "from pathlib import Path",
        "import warnings",
        "warnings.filterwarnings('ignore')",
        "",
        "import numpy as np",
        "import pandas as pd",
        "import geopandas as gpd",
        "import matplotlib.pyplot as plt",
        "import seaborn as sns",
        "",
        "# Geospatial",
        "import rasterio",
        "from rasterio.transform import from_bounds, rowcol",
        "from rasterio.mask import mask",
        "from rasterio.features import shapes, rasterize",
        "from shapely.geometry import Point, shape, box",
        "from scipy.interpolate import griddata",
        "from scipy import stats, ndimage",
        "",
        "# Modules",
        "sys.path.append('./src')",
        "from utils import read_raster_meta, load_dem_array",
        "from preprocessing import resample_to_10m, sample_raster_at_points, calculate_terrain_derivatives",
        "from calibration import calibrate_heights",
        "from outlier_detection import remove_isolated_knn, score_outliers_isolation_forest, filter_by_score_iqr",
        "from statistics_prog import nmad",
        "from landcover import get_clc_level1",
        "from visualization import plot_scatter_comparison, plot_bland_altman",
        "",
        "# Plotting config",
        "plt.style.use('seaborn-v0_8-darkgrid')",
        "sns.set_palette('colorblind')",
        "plt.rcParams['figure.dpi'] = 100",
        "",
        "print(\"Setup complete\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Directories",
        "DATA_DIR = Path('data')",
        "RESULTS_DIR = Path('results')",
        "IMAGES_DIR = Path('images')",
        "",
        "RESULTS_DIR.mkdir(exist_ok=True)",
        "IMAGES_DIR.mkdir(exist_ok=True)",
        "",
        "# Files",
        "SAOCOM_CSV = DATA_DIR / 'verona_fullGraph_weighted_Tcoh07_edited.csv'",
        "TINITALY_DEM = DATA_DIR / 'tinitaly' / 'tinitaly_crop.tif'",
        "COPERNICUS_DEM = DATA_DIR / 'copernicus.tif'",
        "CORINE_LC = DATA_DIR / 'corine_clip.tif'",
        "SENTINEL_RGB = DATA_DIR / 'sentinel_data' / 'Sentinel2Views_Clip.tif'",
        "",
        "# Parameters",
        "TARGET_CRS = 'EPSG:32632'",
        "RESOLUTION = 10.0",
        "NODATA = -9999",
        "COHERENCE_THRESHOLD = 0.7",
        "",
        "print(f\"Data directory: {DATA_DIR}\")",
        "print(f\"Files configured\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Load SAOCOM Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Load CSV",
        "saocom_df = pd.read_csv(SAOCOM_CSV)",
        "",
        "print(f\"Loaded {len(saocom_df):,} SAOCOM points\")",
        "print(f\"Columns: {list(saocom_df.columns)}\")",
        "",
        "# Use LAT2/LON2",
        "lat_col = 'LAT2' if 'LAT2' in saocom_df.columns else 'LAT'",
        "lon_col = 'LON2' if 'LON2' in saocom_df.columns else 'LON'",
        "",
        "# Create GeoDataFrame",
        "geometry = [Point(xy) for xy in zip(saocom_df[lon_col], saocom_df[lat_col])]",
        "saocom_gdf = gpd.GeoDataFrame(saocom_df, geometry=geometry, crs='EPSG:4326')",
        "saocom_gdf = saocom_gdf.to_crs(TARGET_CRS)",
        "",
        "# Rename HEIGHT column",
        "saocom_gdf['HEIGHT_RELATIVE'] = saocom_gdf['HEIGHT']",
        "",
        "print(f\"GeoDataFrame created: CRS={saocom_gdf.crs}\")",
        "print(f\"Bounds: {saocom_gdf.total_bounds}\")",
        "saocom_df.head()"
      ]
    }
  ]
}